CREATE TABLE DEPT
(
DEPTID NUMBER(5), 
DEPTNAME VARCHAR(50), 
CONSTRAINT PK_DEPT_DEPTID PRIMARY KEY(DEPTID)
);

DROP TABlE student;
DROP TABlE dept;
?
CREATE TABLE EMP
(
EMPID NUMBER(5),
NAME VARCHAR2(20),
RESID CHAR(14),
GENDER VARCHAR2(10), 
AGE NUMBER(5), 
DEPTID NUMBER(5) NOT NULL,
CONSTRAINT PK_EMP_EMPID PRIMARY KEY (EMPID), 
CONSTRAINT UK_EMP_RESID UNIQUE (RESID), 
CONSTRAINT EMP_CK_GENDER CHECK (GENDER IN ('남성', '여성')), 
CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTID) REFERENCES DEPT(DEPTID)
);


-- INSERT (TABLE: DEPT)
INSERT INTO DEPT(DEPTID, DEPTNAME)
VALUES (10001, 'IT팀');

INSERT INTO DEPT(DEPTID, DEPTNAME)
VALUES (10002, '생산운영팀');

INSERT INTO DEPT(DEPTID, DEPTNAME)
VALUES (10003, '생산기술팀');

-- INSERT (TABLE: EMP)
INSERT INTO EMP(EMPID, NAME, RESID, GENDER, AGE, DEPTID)
VALUES (30001, '최가은', '881012-1187527', '여성', 32, 10001);

INSERT INTO EMP(EMPID, NAME, RESID, GENDER, AGE, DEPTID)
VALUES (30002, '김효준', '850712-1000007', '남성', 35, 10002);

INSERT INTO EMP(EMPID, NAME, RESID, GENDER, AGE, DEPTID)
VALUES (30003, '서종균', '881112-1187527', '남성', 32, 10003);

SELECT * FROM emp;



--오류
DELETE FROM DEPT WHERE DEPTID = 10003;

DROP TABLE EMP;
DROP TABLE DEPT;


--
CREATE TABLE DEPT
(
DEPTID NUMBER(5), 
DEPTNAME VARCHAR(50), 
CONSTRAINT PK_DEPT_DEPTID PRIMARY KEY(DEPTID)
);

CREATE TABLE EMP
(
EMPID NUMBER(5), 
NAME VARCHAR2(20), 
RESID CHAR(14), 
GENDER VARCHAR2(10), 
AGE NUMBER(5) , DEPTID NUMBER(5) NOT NULL, 
CONSTRAINT PK_EMP_EMPID PRIMARY KEY (EMPID), 
CONSTRAINT UK_EMP_RESID UNIQUE (RESID), 
CONSTRAINT EMP_CK_GENDER CHECK (GENDER IN ('남성', '여성')), 
CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTID) 
REFERENCES DEPT(DEPTID) ON DELETE CASCADE
);

DELETE FROM DEPT WHERE DEPTID = 10003;


CREATE TABLE DEPT(

DEPTID NUMBER(5)

, DEPTNAME VARCHAR(50)

, CONSTRAINT PK_DEPT_DEPTID PRIMARY KEY(DEPTID)

);

?

CREATE TABLE EMP(

EMPID NUMBER(5) 

, NAME VARCHAR2(20) 

, RESID CHAR(14) 

, GENDER VARCHAR2(10) 

, AGE NUMBER(5) 

, DEPTID NUMBER(5) 

, CONSTRAINT PK_EMP_EMPID PRIMARY KEY (EMPID)

, CONSTRAINT UK_EMP_RESID UNIQUE (RESID)

, CONSTRAINT EMP_CK_GENDER CHECK (GENDER IN ('남성', '여성'))

, CONSTRAINT FK_DEPTNO FOREIGN KEY (DEPTID) 

REFERENCES DEPT(DEPTID) ON DELETE SET NULL

);

-- INSERT (TABLE: DEPT)

INSERT INTO DEPT(DEPTID, DEPTNAME)
VALUES (10001, 'IT팀');

INSERT INTO DEPT(DEPTID, DEPTNAME)
VALUES (10002, '생산운영팀');

INSERT INTO DEPT(DEPTID, DEPTNAME)
VALUES (10003, '생산기술팀');

?

-- INSERT (TABLE: EMP)

INSERT INTO EMP(EMPID, NAME, RESID, GENDER, AGE, DEPTID)
VALUES (30001, '최가은', '881012-1187527', '여성', 32, 10001);

INSERT INTO EMP(EMPID, NAME, RESID, GENDER, AGE, DEPTID)
VALUES (30002, '김효준', '850712-1000007', '남성', 35, 10002);

INSERT INTO EMP(EMPID, NAME, RESID, GENDER, AGE, DEPTID)
VALUES (30003, '서종균', '881112-1187527', '남성', 32, 10003);


?--SELECT * FROM DEPT;
SELECT * FROM EMP;

DELETE FROM DEPT WHERE DEPTID = 10003;

------------------------------나 몰라-----------------------------------------
-- 사원명, 급여, 월급(급여/12)를 출력하되 월급은 십단위에서 반올림하여 출력
?
SELECT  ename, sal, round(sal/12, -2) AS wolgeup
FROM    emp;

-- 사원명, 급여, 세금(급여의 3.3%) 를 원단위 절삭하고 출력

SELECT  ename, sal, TRUNC(sal * 0.033, -1) AS tax
FROM    emp;

-- smith의 정보를 사원번호, 성명, 담당업무(소문자) 출력
SELECT  empno, ename, lower(job) AS job
FROM    emp
WHERE   ename = 'SMITH';

--WHERE   ename = UPPER('Smith');
--WHERE   lower(ename) = lower('Smith');

-- 사원번호, 사원명(첫글자만 대문자), 담당업무(첫글자만 대문자)로 출력
SELECT  empno, initcap(ename) AS ename, initcap(job) AS job
FROM    emp;

-- 이름의 첫글자가 ‘K’보다 크고 ‘Y’보다 작은 사원의 정보( 사원번호, 이름, 업무, 급여, 부서번호)를 출력하되 이름순으로 정렬
SELECT  empno, substr(ename, 1, K), job, sal, deptno
FROM    emp   
WHERE   substr(ename, 1,1) > 'K' and substr(ename, 1,1) < 'Y'
order by ename;

-- 이름이 5글자 이상인 사원들을 출력
SELECT  * 
FROM    emp
WHERE   length(ename) >= 5;

-- 이름을 15자로 맞추고 글자는 왼쪽에 오른쪽에는 ‘*’로 채운다
SELECT  RPAD(ename) = 15
FROM    emp;

-- 급여는 10자로 맞추고 숫자는 오른쪽에 왼쪽엔 ‘-‘로 채운다
SELECT  length( sal ) 
FROM    emp;

--------
SELECT   name, jumin, substr(jumin, 8, 1) gender, substr(jumin, 1,2) birth_year
FROM     info_tab;


select  '-' || trim(' 이순신 ') || '-' as col1,  -- 양쪽 공백 제거
        '-' || ltrim(' 이순신 ') || '-' as col2, -- 왼쪽 공백 제거
        '-' || rtrim(' 이순신 ') || '-' as col3  -- 오른쪽 공백 제거
from dual;

SELECT sysdate
FROM  dual;


-- 급여를 숫자에서 ‘영일이삼사오육칠팔구’ 글자로 대체
SELECT sal, translate(sal, '0123456789', '영일이삼사오육칠팔구') kor_sal
FROM  emp;

-- 급여의 숫자에서 0을 ‘$’로 바꾸어 출력
SELECT sal, replace(sal, 0, '$') char_sal
FROM emp;

-- *******replace*******
SELECT  replace('   이   순   신   ', ' ', '') as ename
FROM     dual;

--현재까지 근무일 수가 많은 사람 순으로 출력
SELECT ename, hiredate, sysdate-Nvl(hiredate,sysdate), 
                        ceil(sysdate-Nvl(hiredate,sysdate))
FROM emp
ORDER BY sysdate-hiredate desc; -- asc, desc(내림차순)

SELECT ename, hiredate
FROM emp
ORDER BY sysdate-hiredate desc NULLS LAST;

-- 현재까지 근무일 수가 몇 주 몇 일인가를 출력
SELECT ename, (trunc(sysdate,'day')- trunc(hiredate,'day'))/7 as howweek, 
mod (trunc(sysdate,'day')- trunc(hiredate,'day') ) as howday
FROM    emp;

SELECT ename, sysdate-hiredate,
        trunc((sysdate-hiredate)/7, 0) as weeks,
        floor(mod(sysdate-hiredate, 7)) as days
FROM emp;

-- 10번 부서의 사원의 현재까지의 근무 월수를 계산
SELECT ename, floor(months_between(sysdate, hiredate)),
SELECT ename, ceil(months_between(sysdate, hiredate)),
SELECT ename, months_between(sysdate, hiredate)),
FROM    emp
WHERE deptno = 10;

-- 현재 날짜에서 3개월 후의 날짜 구하기
SELECT add_months(sysdate, 3) as mydate 
FROM dual;

-- 현재 날짜에서 돌아오는 ‘월’요일의 날짜 구하기
SELECT LAST_DAY + 6
FROM dual;

-- 현재 날짜에서 해당 월의 마지막 날짜 구하기
SELECT LAST_DAY(sysdate)
FROM dual;

----------------------------
-- 입사일자에서 입사년도를 출력
SELECT ename, hiredate, to_char(hiredate, 'YYYY') as hire_year
FROM emp;

-- 입사일자를 ‘1999년 1월 1일’ 형식으로 출력
SELECT ENAME, HIREDATE, TO_CHAR(HIREDATE,'YYYY"년" MM"월" DD"일"') AS HIRE_DATE
FROM EMP;

-- 1981년도에 입사한 사원 검색
SELECT *
FROM EMP
WHERE TO_CHAR(HIREDATE,'YYYY')='1981'; AS YEAR
--WHERE TO_CHAR(HIREDATE,'YYYY')LIKE'1981';

-- 5월에 입사한 사원 검색
SELECT *
FROM EMP
WHERE TO_CHAR(HIREDATE,'MM')='05'; AS MONTH
--WHERE TO_CHAR(HIREDATE,'MM')LIKE'05';

-- 급여 앞에 $를 삽입하고 3자리 마다 ,를 출력
SELECT ENAME, SAL, TO_CHAR(SAL, '$999,999,999,999') AS DOLLAR
FROM EMP;

-- 주민번호에서 성별 구하기
SELECT decode( substr(jumin, 8, 1), '1', '남자', '3', '남자', '여자') AS gender 
FROM info_tab;

SELECT CASE substr( jumin, 8, 1) 
            WHEN '1' THEN '남자'
            WHEN '3' THEN '남자'
            ELSE '여자'
            END as gender
FROM info_tab;

-- 부서번호가 10이면 영업부, 20이면 관리부, 30이면 IT부 그 외는 기술부로 출력
-- decode
SELECT deptno, decode (deptno, 10,  '영업부', '20', '관리부', '30', IT부', '기술부') AS deptno 
FROM emp;
-- case
SELECT  case deptno 
            WHEN 10 THEN '영업부'
            WHEN 20 THEN '관리부'
            WHEN 30 THEN 'IT부'
            ELSE '기술부'
            END as deptno
FROM emp;

-- 업무(job)이 analyst이면 급여 증가가 10%이고 clerk이면 15%, manager이면 20%인 경우
--사원번호, 사원명, 업무, 급여, 증가한 급여를 출력

--1
SELECT empno, ename, job, sal, decode(job, 'ANALYST', sal*1.1, 'CLERK', sal*1.15, 'MANAGER', sal*1.2) AS change
FROM emp;


--2

SELECT empno, ename, job, sal, CASE job
WHEN 'ANALYST' THEN sal*1.1
WHEN 'CLERK' THEN sal*1.15
WHEN 'MANAGER' THEN sal*1.2
ELSE sal
END as change
FROM emp;


---그룹함수----
 select all job from emp;
 
 select distinct job from emp;
 
 desc emp;
 
 select rownum, empno, ename, job from emp;
 
 select rownum, empno, ename, job from emp where rownum <=5;
 
-- 업무가 ‘SALESMAN’인 사람들의 월급의 평균, 총합, 최소값, 최대값을 구하기
SELECT avg(sal) avg, sum(sal) sum, min(sal) min, max(sal) max
FROM emp
WHERE job = 'SALESMAN';

INSERT INTO emp(empno, ename, job)
VALUES(9001, '홍길국' ,'SALESMAN');

-- 커미션(COMM)을 받는 사람들의 수는
